// CityTable
let
    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("ZZLbbtNAEIbfxdd9iXXtxK6TXeP1QkyVPkxRqp4gNz1QVKSWgzkIGkuhahRK8jLZdfMW/DNLL1AvPP+O9HnO29uBCE2UiDANNoIdYZIdKAR2/XZpZ68eFgs3OQmGGyB1KaQgTj57SRzEc+5sYq9P2vmUuciEgsNFg5AwCOzD8rs7umSgUwiZdUxREgSHIAism57aUWNHR209ZjRRspvhIzLJCEwyyllfuNnEE0Z2RVERgE6IgMDa4/324MLuf2NqSyVCyliHpuBYW5JLg8C287pdNnZvRH1cXfMPPSUjJQnFi9Aee6v72p3WnjCDuB+qfwHhMWUGlPv1B/fx5jFUX2wKQ0y/0ycGQq0upuvzrwzI+EWliozr6nCTEK7rD0pjJBdFqgnAgwAI5bn7tf79hgGdYgy5KmKCdJcYTYW5s8YeXtn3vhRdRTLmWeHFTEWzcrsHtrlnohRpHvP2yjwmAkKZxo09PveEyirFQKUYYG81u1zNfzCQ0uRinfKpwCEIwnNpHvMIo8tC9DwEx9+d9oOxn75gcav5O180VtdN/Enlz7k1COc8dLd3Txrzff3fls5FytvUOW8TQjf5edmOf+JMguHwLw==", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [City = _t, Delimitered = _t, Code = _t, 中文 = _t])
in
    Source

// JLMTable
let
    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("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", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Find = _t, EN = _t, CN = _t]),
    AddReplace = Table.AddColumn(Source,"Replace", each "^"&[Find]&"^",type text)
    in
    AddReplace

// PreJLM
let
    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("bVJbcsMgDLxLvjPTMwgsY9UgGMDtNJnc/xqVMNhJ0w/PoN3V03u/X+xCDPiF2WRySzXA6+X6hq6Xx7VrC9otUyUsqiuWToq4YmaoFBm8hUQVvIrI2iaCQpDA0kxWYI0arD2JnUCteyu3JwfIK1Zt1FDno3kDU8XxhFKwBmBwGJCr9giNeBlMYIl9I16WkeC5uU4OqSGeAlWcBPF12jVRX89xSMA/YxIbc4q5NXyGxnuJfpKNy594hN7bY7vz+VGXY9NZrs2W2pD76lupGTwB4/cNwQNP/VcC35oiYM7kNcHEGfpZJk2jJpcNRNJrnozCTTzOd3Tq9RlM46O4pSCoEbBgJ6M1+0031gN2je69xT1tAaqRXdd3Ax6OsvJv7PAkW7ObTX5G2QyVhbb5U5iwza7fkd0qn6xTFmAnxbVo6UMM+j8ukabFWRw9/J9gOEIniLMMXptp5YQoF3z8Ag==", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Find = _t, Replace = _t])
in
    Source