( TextName as text ) =>
 let
  Text1   = 
   if Text.Contains ( TextName, "BRANCH" ) and not Text.Contains ( TextName, "/" ) then
    fxCleaner (
     TextName, 
     { "HONGKONGBRANCH", "LONDONBRANCH", "SINGAPOREBRANCH", "DUBAIDIFCBRANCH", "NEWYORKBRANCH", "MACAUBRANCH", "/THE" }, 
     { "/HONGKONG", "/LONDON", "/SINGAPORE", "/DUBAI", "/NEWYORK", "/MACAU", "" }
    )
   else
    TextName, 
  BRText2 = Text.AfterDelimiter ( Text1, "/" ), 
  BRText3 = fxCleaner ( BRText2, null,CityTable[City], CityTable[Delimitered] ), 
  BRText4 = Text.BetweenDelimiters ( BRText3, "^", "^" ), 
  BRText5 = fxCleaner ( BRText4, null,CityTable[Code], CityTable[中文] ), 
  Text2   = Text.BeforeDelimiter ( Text1, "/" ), 
  Text3   = fxCleaner ( Text2, null,PreJLM[Find], PreJLM[Replace] ), 
  Text4   = Text.BeforeDelimiter ( Text3, "LTD" ), 
  Text5   = if Text.Contains ( Text4, "BANK" ) and not Text.StartsWith ( Text4, "BANK" ) then Text.BeforeDelimiter ( Text4, "BANK" ) & "BANK" else Text4, 
  Text6   = Text.BeforeDelimiter ( Text5, "INVEST" ), 
  Text7   = if Text.Contains ( Text6, "SEC" ) and not Text.StartsWith ( Text6, "SEC" ) then Text.BeforeDelimiter ( Text6, "SEC" ) & "SEC" else Text6, 
  Text8   = if Text.EndsWith ( Text7, "AG" ) then Text.Replace ( Text7, "AG", "" ) else Text7, 
  Text9   = fxCleaner ( Text8, null,JLMTable[Find], JLMTable[Replace] ), 
  Text10  = Text.BetweenDelimiters ( Text9, "^", "^" ), 
  Text11  = if Text10 = null then "" else fxCleaner ( Text10, JLMTable[Find], JLMTable[CN] ), 
  Text12  = if BRText5 <> "" then Text11 & "/" & BRText5 else Text11
 in
  Text12