(_input as text) =>
    let     //_input = _debugfxSource,
        _excelkey = Text.Remove(Text.BeforeDelimiter(Text.Upper(_input ?? ""), "_"), {" "}),
        _sheetkey = Text.Replace(Text.AfterDelimiter(Text.Upper(_input ?? ""), "_"), "=", ""),
        _dimfdexcel = Load("DimFDExcel"),
        _dimbinary = Load("DimFDExcel_Content"),
        _IsEmpty = Table.SelectRows(_dimfdexcel, each [Excel_Key] = _excelkey),
        #"Joined Content" = Table.Join(
            _IsEmpty, {"FDPath", "FileName"}, _dimbinary, {"Folder Path", "FileName.Extracted"}
        ),
        #"Added ExcelWB" = Table.RemoveRowsWithErrors(
            Table.AddColumn(
                #"Joined Content",
                "ExcelWB",
                each Table.SelectRows(Excel.Workbook([Content]), each [Kind] <> "DefinedName")
            ),
            {"ExcelWB"}
        ),
        Sheet = #"Added ExcelWB"{0}[ExcelWB],
        #"Filtered Rows" =
            if _sheetkey = "" then
                Table.SelectColumns(
                    Table.Sort(Sheet, {{"Kind", Order.Descending}, {"Item", Order.Ascending}}),
                    {"Item", "Kind", "Data"}
                )
            else
                fx(
                    "Data"
                )(
                    Table.SelectRows(
                        Sheet,
                        each
                            if Text.Contains(_input ?? "", "=") then
                                Text.Upper([Item]) = _sheetkey
                            else
                                Text.Contains([Item], _sheetkey, Comparer.OrdinalIgnoreCase)
                    )
                [Data]{
                    0
                })
    in
        #"Filtered Rows"
