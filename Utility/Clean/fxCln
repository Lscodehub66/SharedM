//SampleTF = Table.TransformColumns(Source, List.Transform(Table.ColumnNames(Source),each {_, each fxCleaner(_,null, {"【", "】"}, {"", ""})})),
//SampleSmartClean = Table.AddColumn(Source, "【】", each fxCleaner([Column],"主体")),
let
    Source = ( 
        InputText as text,
        optional CleanerText as text,
        optional FinderList as nullable list,
        optional ReplacerList as nullable list
    ) =>
        let
            // Input Transform
            TextName =
                if InputText = null then
                    ""
                else if Cleaner = "主体" and not List.ContainsAny(Text.ToList(InputText), {"A".."Z"}, Comparer.OrdinalIgnoreCase) then
                    Text.Replace(InputText, " ", "")
                else
                    InputText,
            Cleaner = Text.Upper(Text.Trim(CleanerText)),
            // Load Nested Cleaner tbl
            Source = Load("fxCleaner_tbl")(Cleaner),
            //
            #">>>FText_List" = Text.Combine(List.Transform(Source[Column1], each Text.BeforeDelimiter(_, ",")), "、"),
            #">>>FText_M" = fxToM(Source[Column1]),
            // Select Cleaner
            Gettbl =
                if Cleaner = null then
                    Table.FromColumns({FinderList, ReplacerList}, {"Find", "Replace"})
                else
                      Source,
            // Bulk replace
            ReplacerTable = Table.Buffer(Gettbl),
            FindReplaceList = Table.ToRows(ReplacerTable),
            Counter = Table.RowCount(ReplacerTable),
            BulkReplaceValues = (TextToReplaceTemp, n) =>
                let
                    ReplacedText = Text.Replace(
                        TextToReplaceTemp,
                        if FindReplaceList{n}{0} = null then
                            ""
                        else
                            FindReplaceList{n}{0},
                        if FindReplaceList{n}{1} = null then
                            ""
                        else
                            FindReplaceList{n}{1}
                    )
                in
                    if n = Counter - 1 then
                        ReplacedText
                    else
                        @BulkReplaceValues(ReplacedText, n + 1),
            Output = BulkReplaceValues(TextName, 0)
        in
            Output,
    //metadata-record
    fnType = type function (
        TextName as text,
        optional CleanerText as (
            type nullable text meta [
                Documentation.AllowedValues = {
                    "主体",
                    "地区",
                    "区县",
                    "评级",
                    "价格",
                    "结构",
                    "品种",
                    "周几",
                    "货币",
                    "角色",
                    "投资者",
                    "一二三",
                    "ABC",
                    "LOCATION",
                    "LOCATION^",
                    "LOCATIONCN"
                }
            ]
        ),
        optional FinderList as nullable list,
        optional ReplacerList as nullable list
    ) as list meta [
        Documentation.Name = "fxCleaner",
        Documentation.Description = "主体、地区、区县、评级、价格、结构、品种、周几、货币、角色、投资者、一二三、ABC、LOCATION、LOCATION^、LOCATIONCN"
    ]
in
    Value.ReplaceType(Source, fnType)
