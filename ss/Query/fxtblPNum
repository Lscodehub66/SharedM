(TableName as table) =>
let
 Source       = TableName, 
 FRN_Spd      = Table.AddColumn ( Source, "浮息_SPD", each Text.AfterDelimiter ( Text.Select ( [计息基准], { "0" .. "9", "+", "." } ), "+" ) ), 
 FRN_Bmk      = Table.AddColumn ( FRN_Spd, "浮息_BMK", each fxCleaner ( Text.BeforeDelimiter ( [计息基准], "+" ), "价格" ), type text ), 
 AIPT_Clean   = Table.AddColumn (
  Table.TransformColumns ( FRN_Bmk, { { "IPT_DMI", each if Text.EndsWith ( _, "a", Comparer.OrdinalIgnoreCase ) then Text.BeforeDelimiter ( _, "A", { 0, RelativePosition.FromEnd } ) & "区域" else _ } } ), 
  "IPT", 
  each fxCleaner ( Text.BeforeDelimiter ( Text.BeforeDelimiter ( Text.BeforeDelimiter ( [IPT_DMI], "，" ), "区域+" ), "（" ), "价格" )
 ), 
 TF_IPT       = Table.TransformColumns ( AIPT_Clean, { { "IPT", each if Text.Contains ( _, "/T" ) or Text.Contains ( _, "、" ) or Text.Contains ( _, "-" ) then "【" & _ & "】" else _ } } ), 
 AIPT_SPD     = Table.AddColumn ( TF_IPT, "IPT_SPD", each if Text.Contains ( [IPT], "-" ) or Text.Contains ( [IPT], "【" ) then "" else Text.Select ( Text.AfterDelimiter ( [IPT], "+" ), { "0" .. "9", "." } ) ), 
 AIPT_Yield   = Table.AddColumn ( AIPT_SPD, "IPT_YIELD", each if Text.Contains ( [IPT], "%" ) then Text.BeforeDelimiter ( [IPT], "%" ) else "" ), 
 RFPTMissing = Table.ReplaceValue(AIPT_Yield, "", each if [IPT_DMI] <> "" then "【】"else "", Replacer.ReplaceValue,{"FPG_DMI"} ),
 AFPT_Clean   = Table.AddColumn (
  RFPTMissing, 
  "FPT1", 
  each if Text.Contains ( [FPG_DMI], "%/" ) or Text.Contains ( [FPG_DMI], "|" ) then "【" & fxCleaner ( Text.BeforeDelimiter ( [FPG_DMI], "，" ), "价格" ) & "】" else fxCleaner ( Text.BeforeDelimiter ( [FPG_DMI], "，" ), "价格" )
 ), 
 AWPIR        = Table.AddColumn ( AFPT_Clean, "WPIR", each Text.Select ( Text.AfterDelimiter ( [FPT1], "+/-" ), { "0" .. "9", "-", "." } ) ), 
 AFPT2        = Table.AddColumn ( AWPIR, "FPT2", each Text.BeforeDelimiter ( Text.BeforeDelimiter ( [FPT1], "+/-" ), "(" ), type text ), 
 AFPT_Spd     = Table.AddColumn ( AFPT2, "FPT_SPD", each Text.BeforeDelimiter ( Text.Select ( Text.AfterDelimiter ( [FPT2], "+" ), { "0" .. "9", "-", "." } ), "-" ) ), 
 AFPT_Spd上限   = Table.AddColumn ( AFPT_Spd, "FPT_SPD上限", each Text.Select ( Text.AfterDelimiter ( Text.AfterDelimiter ( [FPT2], "+" ), "-" ), { "0" .. "9", "." } ) ), 
 NumFPT_Spd下限 = Table.AddColumn ( fxDataFormat ( AFPT_Spd上限 ), "FPT_SPD假设窄端", each if [FPT_SPD] <> null and [WPIR] <> null then [FPT_SPD] - [WPIR] else if [FPT_SPD] <> null then [FPT_SPD] else null, type number ), 
 AFPT_Yield   = Table.AddColumn (
  NumFPT_Spd下限, 
  "FPT_YIELD", 
  each if Text.Contains ( [FPT2], "【" ) then "" else Text.BeforeDelimiter ( Text.Replace ( Text.BeforeDelimiter ( [FPT2], "%", { 0, RelativePosition.FromEnd } ), "%", "" ), "-" )
 ), 
 AFPT_Yield上限 = Table.AddColumn (
  AFPT_Yield, 
  "FPT_YIELD上限", 
  each if Text.Contains ( [FPT2], "%" ) and not Text.Contains ( [FPT2], "T" ) then Text.AfterDelimiter ( Text.Replace ( Text.BeforeDelimiter ( [FPT2], "%", { 0, RelativePosition.FromEnd } ), "%", "" ), "-" ) else ""
 )
in
 AFPT_Yield上限