// MultiSource
"ON" meta [IsParameterQuery=true, List={"ON", "OFF"}, DefaultValue="ON", Type="Text", IsParameterQueryRequired=true]

// GPS
// GPS
let

GPS = Excel.CurrentWorkbook(){[Name="GPS"]}[Content][Column1]{0}
in
    GPS

// SharedM
let
 Source    = Folder.Files ( if GPS = "Remote" then "C:\Users\ktkt2\OneDrive\EXE Team\DataHub\SharedM" else "\\10.10.1.215\dcm$\Team Folder\Execution Team\DataHub\SharedM" ), 
 Filtered  = Table.SelectRows ( Source, each not Text.Contains ( [Folder Path], ".git" ) and not Text.Contains ( [Name], "git" ) and [Name] <> "" and not Text.Contains ( [Folder Path], "\ss\" ) ), 
 Merged    = Table.AddColumn ( Filtered, "Path", each Text.Combine ( { [Folder Path], [Name] }, "" ), type text ), 
 Extracted = Table.TransformColumns ( Merged, { { "Folder Path", each Text.AfterDelimiter ( _, "SharedM\" ), type text }, { "Name", each Text.BeforeDelimiter ( _, "." ), type text } } ), 
 Removed   = Table.SelectColumns ( Extracted, { "Name", "Folder Path", "Path" } )
in
 Removed

// fxShared
// fxShared
( FunctionFileName as text ) =>
 let
  Filtered = Table.SelectRows (SharedM, each [Name] = FunctionFileName ), 
  Path     = Filtered[Path]{0}, 
  Source   = Text.FromBinary ( File.Contents ( Path ) ) 

 in
  Source

// fxIsFIMTN
let 
Source = fxShared("fxIsFIMTN"),
    EVA = Expression.Evaluate(Source, #shared)    
in
    EVA

// fxDMIStats
let 
Source = fxShared("fxDMIStats"),
    EVA = Expression.Evaluate(Source, #shared)    
in
    EVA

// fxDynamicMerge
let 
Source = fxShared("fxDynamicMerge"),
    EVA = Expression.Evaluate(Source, #shared)    
in
    EVA

// fxDMILoad
// fxDMILoad
let 
Source = fxShared("fxDMILoad"),
    EVA = Expression.Evaluate(Source, #shared)    
in
    EVA

// TapLookup
let
    Source = Excel.CurrentWorkbook(){[Name="TapLookup"]}[Content],
    #"Added Custom" = Table.AddColumn(Source, "FolderRefreshed", each DateTime.LocalNow()),
    #"Demoted Headers" = Table.DemoteHeaders(#"Added Custom"),
    #"Removed Top Rows" = Table.Skip(#"Demoted Headers",1),
    #"Replaced Value" = Table.ReplaceValue(#"Removed Top Rows",null,"",Replacer.ReplaceValue,Table.ColumnNames(#"Removed Top Rows")),
    Custom1 = Table.ReplaceValue(#"Replaced Value","--","",Replacer.ReplaceValue,{"Column1", "Column2"})
in
    Custom1

// fxLauncher
let 
Source = fxShared("fxLauncher"),
    EVA = Expression.Evaluate(Source, #shared)    
in
    EVA

// DLDSource
// LaunchDownload
let

Source = fxLauncher("1.Download",null)
in
Source

// dmi
let
 Source       = DLDSource, 
 DMI_Sheet    = Source{[ Item = "美元债一级", Kind = "Sheet" ]}[Data], 
 RemovedTop   = Table.Skip ( DMI_Sheet, 1 ), 
 Promoted     = Table.PromoteHeaders ( RemovedTop, [ PromoteAllScalars = true ] ),
    Filtered = Table.SelectRows ( Promoted, each if WeeklyFilter <> "OFF" then Date.From([定价日]) < Date.FromText ( Monday ) and Date.From([定价日])>= Date.AddDays ( Date.FromText ( Monday ), - 7 ) else true ),
    Appended = if TapLookup[Column3]{0} = "N" then Filtered else Table.Combine({Filtered, Table.SelectColumns(CWB_AddTap,Table.ColumnNames(Filtered),MissingField.UseNull)}),
    Functionload = fxDMILoad ( Appended )
in
    Functionload

// WeeklyFilter
"ON" meta [IsParameterQuery=true, List={"ON", "OFF"}, DefaultValue="ON", Type="Text", IsParameterQueryRequired=true]

// Monday
"2023/09/11" meta [IsParameterQuery=true, List={"2023/03/20", "2023/03/27", "2023/04/03", "2023/04/10", "2023/04/17", "2023/04/24", "2023/05/01", "2023/05/08", "2023/05/15", "2023/05/22", "2023/05/29", "2023/06/05", "2023/06/12", "2023/06/19", "2023/06/26", "2023/07/03", "2023/07/10", "2023/07/17", "2023/07/24", "2023/07/31", "2023/08/07", "2023/08/14", "2023/08/21", "2023/08/28", "2023/09/04", "2023/09/11", "2023/09/18", "2023/09/25", "2023/10/02", "2023/10/09", "2023/10/16", "2023/10/23", "2023/10/30", "2023/11/06", "2023/11/13", "2023/11/20", "2023/11/27", "2023/12/04", "2023/12/11", "2023/12/18"}, DefaultValue=..., Type="Text", IsParameterQueryRequired=true]

// fxDataFormat
let 
Source = fxShared("fxDataFormat"),
    EVA = Expression.Evaluate(Source, #shared)    
in
    EVA

// CWB_AddTap
let
    Source = Excel.CurrentWorkbook(){[Name="AddTapLoad"]}[Content],
    #"Transposed Table" = Table.Transpose(Source),
    #"Promoted Headers" = fxDataFormat(Table.PromoteHeaders(#"Transposed Table", [PromoteAllScalars=true]))
in
    #"Promoted Headers"

// DLDconso
let
 Source      = dmi, 
 Source2     = fxDataFormat ( Excel.CurrentWorkbook(){[ Name = "Table_dmi" ]}[Content] ), 
 Function    = Table.AddColumn ( Source, "亿美元", each if [货币] = "USD" then 1 * [#"发行规模(亿)"] else fxSmartFX ( "USD", [货币], [定价日] ) * [#"发行规模(亿)"] ), 
 Function1   = Table.AddColumn ( Function, "亿元", each if [货币] = "CNH" then 1 * [#"发行规模(亿)"] else fxSmartFX ( "CNH", [货币], [定价日] ) * [#"发行规模(亿)"] ), 
 Function2   = Table.AddColumn ( Function1, "亿港币", each if [货币] = "HKD" then 1 * [#"发行规模(亿)"] else fxSmartFX ( "HKD", [货币], [定价日] ) * [#"发行规模(亿)"] ), 
MCredit = fxDynamicMerge(  Function2,mCreditNames,"信用主体","信用主体",{"信用主体简称","板块"},{""}),
FnMerger    = fxDynamicMerge (
 MCredit, 
  BBGcorp, 
  "Check", 
  "Check", 
  { "发行人注册地", "发行人主上市地", "补充OMAS updates", "定价息差", "债项BBG", "主体BBG" }, 
  { "注册成立地", "发行人主上市地", "补充OMAS updates", "定价息差", "发行评级", "主体评级" }
 ), 
 Replaced1   = Table.ReplaceValue ( FnMerger, null, each [债项评级], Replacer.ReplaceValue, { "发行评级" } ), 
 Replaced2   = Table.ReplaceValue ( Replaced1, null, each [#"穆迪/标普"], Replacer.ReplaceValue, { "主体评级" } ), 
 ReplacedWST = Table.ReplaceValue (
  Replaced2, 
  "", 
  each if List.PositionOf ( WST[Check], [Check] ) < 0 then "" else WST[WSTIPT]{List.PositionOf ( WST[Check], [Check] )}, 
  Replacer.ReplaceValue, 
  { "IPT_DMI" }
 ), 
 Function3   = if MultiSource = "OFF" then Table.RenameColumns (MCredit, { { "债项评级", "发行评级" }, { "穆迪/标普", "主体评级" } } ) else fxCheckNDupe ( fxDataFormat ( ReplacedWST ) ), 
 Function4 = fxDMIStats(Function3),
Function5   = fxIsFIMTN ( Function4, 1 ), 
 AddedIndex  = Table.AddIndexColumn ( Function5, "Index", 1, 1, Int64.Type ), 
 Reorder     = 
  if MultiSource = "OFF" then
   Table.ReorderColumns ( AddedIndex, Table.ColumnNames ( Excel.CurrentWorkbook(){[ Name = "DLDconso" ]}[Content] ), MissingField.UseNull )
  else
   Table.ReorderColumns ( #"AddedIndex", { "Index" } & Table.ColumnNames ( Function3 ) )
in
 Reorder

// fxSmartFX
let
    Source = (ToCurrency as text, FromCurrency as text, Valuedate as date)=>

let
      FXWeb = "https://www.xe.com/currencytables/?from="&ToCurrency
      & "&date="&Date.ToText(Valuedate,"yyyy-MM-dd"), 
    Source = Web.Page(Web.Contents(FXWeb & "#table-section")), 
    Data = Source{0}[Data], 
    #"Demoted Headers" = Table.DemoteHeaders(Data), 
    #"Filtered Rows" = Table.SelectRows(#"Demoted Headers",  each [Column1]=FromCurrency) ,
    #"Removed Other Columns" = Table.SelectColumns(#"Filtered Rows", {"Column3"}), 
    #"Changed Type" = Table.TransformColumnTypes(
      #"Removed Other Columns", 
      {{"Column3", type number}}
    ),
     #"Divided"= Table.TransformColumns(#"Changed Type", {{"Column3", each 1 /  _, type number}}),
    #"Rounded Off" = Table.TransformColumns(
      #"Divided", 
      {{"Column3", each Number.Round(_, 3), type number}}
    ),
    Column3 = #"Rounded Off"{0}[Column3]
  in
  Column3
in
    Source

// mCreditNames
let
Source = fxLauncher("DataHub",null),
    mCredit_Table = Source{[Item="mCredit",Kind="Table"]}[Data],
    #"Removed Other Columns" = Table.SelectColumns(mCredit_Table,{"信用主体", "信用主体简称","板块"})
in
    #"Removed Other Columns"

// fxDupeRemover
let
    Source = (TableName as table, NewColName as text, TextSource as text, DateSource as text, DateFormat as text, Delimeter as text, IsDateFirst as text ) =>
 let
  Source     = TableName, 
  DateType   = Table.TransformColumnTypes ( Source, { { TextSource, type text }, { DateSource, type date } } ), 
  NoSpace    = Table.ReplaceValue ( DateType, " ", "", Replacer.ReplaceText, { TextSource } ), 
  Removed    = Table.RemoveColumns ( NoSpace, { NewColName }, MissingField.Ignore ), 
  ReAdd      = Table.AddColumn (
   Removed, 
   NewColName, 
   each 
    if IsDateFirst = "N" then
     Record.Field ( _, TextSource ) & Delimeter & Date.ToText ( Record.Field ( _, DateSource ), DateFormat )
    else
     Date.ToText ( Record.Field ( _, DateSource ), DateFormat )  & Delimeter & Record.Field ( _, TextSource ), 
   type text
  ), 
  RemoveDupe = Table.Distinct ( ReAdd, { NewColName } )
 in
  RemoveDupe
in
    Source

// fxCheckNDupe
let
 Source = ( TableName as table ) =>
  let
   Function = fxDupeRemover ( TableName, "Check", "ISIN", "定价日","yyMMdd","","Y" )
  in
Function
in
 Source

// fxByeAllErrors
// fxByeAllErrors
let 
Source = fxShared("fxByeAllErrors"),
    EVA = Expression.Evaluate(Source, #shared)    
in
    EVA

// BBGcorp
// BBGcorp
let
 Source             = DLDSource, 
 tbl_dmi_isin_Table = Source{[ Item = "tbl_dmi_isin", Kind = "Table" ]}[Data], 
 RemovedErrors      = Table.RemoveRowsWithErrors ( tbl_dmi_isin_Table, { "定价日" } ), 
 DemotedHeaders     = Table.DemoteHeaders ( RemovedErrors ), 
 Filtered           = Table.SelectRows ( DemotedHeaders, each ( [Column2] <> "" ) ), 
 PromotedHeaders    = Table.PromoteHeaders ( Filtered, [ PromoteAllScalars = true ] ), 
 CustomFunction     = fxDataFormat ( PromotedHeaders ), 
 CustomFunction3    = Table.AddColumn ( CustomFunction, "债项BBG", each fxCleaner ( [发行评级], "Rtg" ) ), 
 CustomFunction4    = Table.AddColumn ( CustomFunction3, "主体BBG", each fxCleaner ( [主体评级], "Rtg" ) ), 
 CustomFunction5    = 
  if TapLookup[Column3]{0} = "N" then
   fxByeAllErrors ( CustomFunction4 )
  else
   Table.Combine ( { fxByeAllErrors ( CustomFunction4 ), Table.SelectColumns ( CWB_AddTap, Table.ColumnNames ( CustomFunction4 ), MissingField.UseNull ) } ), 
 CustomFunction2    = if MultiSource = "OFF" then Excel.CurrentWorkbook(){[ Name = "BBGcorp" ]}[Content] else fxCheckNDupe ( CustomFunction5 )
in
 CustomFunction2

// fxCleaner
// fxCleaner
let 
Source = fxShared("fxCleaner"),
    EVA = Expression.Evaluate(Source, #shared)    
in
    EVA

// fxReplacer
let 
Source = fxShared("fxReplacer"),
    EVA = Expression.Evaluate(Source, #shared)    
in
    EVA

// WST
let
 Source          = DLDSource, 
 Table           = Source{[ Item = "华尔街交易员", Kind = "Sheet" ]}[Data], 
 RemovedTop      = Table.Skip ( Table, 1 ), 
 Promoted        = Table.PromoteHeaders ( RemovedTop, [ PromoteAllScalars = true ] ), 
 Renamed         = Table.RenameColumns ( Promoted, { { "定价日期", "定价日" } }, MissingField.Ignore ), 
 SelectedRows    = Table.SelectRows ( Renamed, each not List.IsEmpty ( List.RemoveMatchingItems ( Record.FieldValues ( _ ), { "", null } ) ) ), 
 RemovedCol      = Table.RemoveColumns ( SelectedRows, { "到期期限", "规模 (亿美元)", "发行评级" }, MissingField.Ignore ), 
 BeforeDelimiter = Table.AddColumn ( RemovedCol, "WSTIPT", each if Text.StartsWith ( [初始发行价], "-" ) then Text.BeforeDelimiter ( [初始发行价], "/" ) else Text.BeforeDelimiter ( [初始发行价], "/" ) & "区域", type text ), 
 AfterDelimiter  = Table.AddColumn ( BeforeDelimiter, "WSTFPT", each Text.AfterDelimiter ( [初始发行价], "/" ), type text ), 
 ReplacedValue   = fxReplacer( AfterDelimiter, {"-", null},{"",""}, { "WSTIPT", "WSTFPT" } ), 
 FunctionCheck   =  if MultiSource = "OFF" then Excel.CurrentWorkbook(){[ Name = "WST" ]}[Content] else  fxCheckNDupe ( ReplacedValue )
in
 FunctionCheck

// ForReview_wCurated
let
 Source      = DLDconso, 
 FnMerger    = fxDynamicMerge ( Source, Transformer, "Check", "Check", { "" }, { "" } ), 
  FnMerger1  = fxDynamicMerge ( FnMerger, IsTap, "Check", "Check", { "" }, { "" } ), 
 Replaced    = try Table.ReplaceValue ( FnMerger1, each [发行评级], each if [发行评级] = null or [发行评级] = "" then [债项评级] else [发行评级], Replacer.ReplaceValue, { "发行评级" } ) otherwise FnMerger1, 
 SelectedCol = fxCheckNDupe(Table.SelectColumns ( Replaced, headers_review, MissingField.UseNull )), 
 Sorted      = Table.Sort ( SelectedCol, { "定价日", Order.Descending } )
in
 Sorted

// fxAddTenor
let 
Source = fxShared("fxAddTenor"),
    EVA = Expression.Evaluate(Source, #shared)    
in
    EVA

// fxAddESGMore
let 
Source = fxShared("fxAddESGMore"),
    EVA = Expression.Evaluate(Source, #shared)    
in
    EVA

// fxFRN
let 
Source = fxShared("fxFRN"),
    EVA = Expression.Evaluate(Source, #shared)    
in
    EVA

// fxIPGNum
let 
Source = fxShared("fxIPTNum"),
    EVA = Expression.Evaluate(Source, #shared)    
in
    EVA

// fxFPGNum
let 
Source = fxShared("fxFPGNum"),
    EVA = Expression.Evaluate(Source, #shared)    
in
    EVA

// fxPBMK
let 
Source = fxShared("fxPBMK"),
    EVA = Expression.Evaluate(Source, #shared)    
in
    EVA

// fxPNum
let 
Source = fxShared("fxPNum"),
    EVA = Expression.Evaluate(Source, #shared)    
in
    EVA

// fxPriceDES
let 
Source = fxShared("fxPriceDES"),
    EVA = Expression.Evaluate(Source, #shared)    
in
    EVA

// fxDiscoverPrice
let
    Source = (TableName as table) =>
  let
    Source = TableName, 
    CustomFunction = fxFRN(Source,"计息基准",null),
     CustomFunction1 = fxIPGNum( CustomFunction,"IPT_DMI",null),
     CustomFunction2 = fxFPGNum( CustomFunction1,"FPG_DMI",null),
     CustomFunction3 = fxPBMK( CustomFunction2,"定价息差"),
    CustomFunction4 = fxPNum(  CustomFunction3),
    CustomFunction5 = fxPriceDES( CustomFunction4)
  in
 CustomFunction5
in
    Source

// Transformer
let
 Source              = DLDconso, 
 // FRN Spd & BMK
 #"Custom Function"  = fxFRN ( Source, "计息基准", null ), 
 #">>Debug"          = fxDebug ( #"Custom Function", "计息基准", null, List.RemoveMatchingItems ( Table.ColumnNames ( #"Custom Function" ), Table.ColumnNames ( Source ) ) ), 
 // IPG Spd & Yield
 #"Custom Function1" = fxIPGNum ( #"Custom Function", "IPT_DMI", null ), 
 #">>Debug1"         = fxDebug ( #"Custom Function1", "IPT_DMI", null, List.RemoveMatchingItems ( Table.ColumnNames ( #"Custom Function1" ), Table.ColumnNames ( #"Custom Function" ) ) ), 
 // FPG Spd & Yield WPIR
 #"Custom Function2" = fxFPGNum ( #"Custom Function1", "FPG_DMI", null ), 
 #">>Debug2"         = fxDebug ( #"Custom Function2", "FPG_DMI", null, List.RemoveMatchingItems ( Table.ColumnNames ( #"Custom Function2" ), Table.ColumnNames ( #"Custom Function1" ) ) ), 
 // Priced Spd & BMK
 #"Custom Function3" = fxPBMK ( #"Custom Function2", "定价息差" ), 
 #">>Debug3"         = fxDebug ( #"Custom Function3", "票息_DMI", null, List.RemoveMatchingItems ( Table.ColumnNames ( #"Custom Function3" ), Table.ColumnNames ( #"Custom Function2" ) ) ), 
 #"Custom Function4" = fxPNum ( #"Custom Function3" ), 
 #">>Debug4"         = fxDebug ( #"Custom Function4", "票息_DMI", null, List.RemoveMatchingItems ( Table.ColumnNames ( #"Custom Function4" ), Table.ColumnNames ( #"Custom Function3" ) ) ), 
 #"Custom Function5" = fxPriceDES ( #"Custom Function4" ), 
 #">>Debug5"         = fxDebug ( #"Custom Function4", "票息_DMI", null, List.RemoveMatchingItems ( Table.ColumnNames ( #"Custom Function5" ), Table.ColumnNames ( #"Custom Function4" ) ) ), 
 SmartPricer         = fxDiscoverPrice ( Source ), 
 PricerHeaders       = { "Check", "ISIN", "定价日", "信用主体", "票息", "IPG", "FPG", "定价", "定价基准", "收窄基点" }, 
 #">>Calculations"   = Table.SelectColumns ( SmartPricer, { "ISIN", "Check", "定价日", "信用主体" } & List.RemoveMatchingItems ( Table.ColumnNames ( SmartPricer ), Table.ColumnNames ( Source ) ) ), 
 #">>CheckResult"    = Table.SelectColumns ( SmartPricer, PricerHeaders ), 
 FnFeatured          = fxAddESGMore ( SmartPricer ), 
 FnTenor             = fxAddTenor ( FnFeatured ), 
 CleanSTR            = Table.AddColumn ( FnTenor, "结构", each fxCleaner ( [发行架构], "Structure" ) ), 
 NameSBLC            = Table.AddColumn ( CleanSTR, "备证行", each fxSNBankCorp ( [SBLC提供者] ) ), 
 Listing             = Table.AddColumn ( NameSBLC, "上市", each fxSmartListing ( [发行场所] ) ), 
 Branch              = Table.AddColumn ( Listing, "通过分行", each fxSNBranch ( [发行人] ) ), 
 SelectedCol         = Table.SelectColumns ( Branch, List.Distinct ( PricerHeaders & List.RemoveMatchingItems ( Table.ColumnNames ( Branch ), Table.ColumnNames ( SmartPricer ) ) ) )
in
 SelectedCol

// fxSNBankCorp
let 
Source = fxShared("fxSNBankCorp"),
    EVA = Expression.Evaluate(Source, #shared) 
in
EVA

// fxSmartListing
let 
Source = fxShared("fxSmartListing"),
    EVA = Expression.Evaluate(Source, #shared) 
in
EVA

// fxSNBranch
let 
Source = fxShared("fxSNBranch"),
    EVA = Expression.Evaluate(Source, #shared)    
in
    EVA

// IsTap
// IsTap
// IsTap
let
 Source          = dmi, 
 ValidateTap     = Table.AddColumn (
  Source, 
  "增发判定", 
  each if  [起息日期] = null then "" else if [定价日] > [起息日期] then "[增发]" else ""
 ), 
 SelectCol       = Table.SelectColumns ( ValidateTap, { "信用主体", "ISIN", "定价日", "Check", "增发判定" } ), 
 Sorted          = Table.Buffer ( Table.Sort ( SelectCol, { { "定价日", Order.Descending } } ) ), 
 Grouped         = Table.Group (
  Sorted, 
  { "ISIN" }, 
  {
   { "COUNT_ISIN", each Table.RowCount ( _ ), Int64.Type }, 
   { "Check", each Text.Combine ( [Check], ";" ), type text }, 
   { "增发判定", each Text.Combine ( [增发判定], ";" ), type text }
  }
 ), 
 Filtered        = Table.SelectRows ( Grouped, each [COUNT_ISIN] <> 1 or [增发判定] <> "" ), 
 BeforeDelimiter = Table.TransformColumns ( Filtered, { { "Check", each Text.BeforeDelimiter ( _, ";" ), type text } } ), 
 SelectCol2      = Table.SelectColumns ( BeforeDelimiter, { "Check" } ), 
 AddedCustom     = Table.AddColumn ( SelectCol2, "增发判定", each "[增发]" )
in
 AddedCustom

// headers_review
// headers_review
let
  Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("ZZDBasJAEIbfJScLfQmxqXgRqXoKORVB8CWMxiSIqEWhVFoloiTtoTlU2pigeZmd3c1buOwksNDT/PPBzD//GIYG3xuS/tHXo2beGxrJfLYOSZySywqBlDyyWRJIAIsX7s9UcHB5ZAkmO71dl7XRwvpYVLr+ZV827BI2OuOY9EW534qt4B0Ek4ClK7q1peSnAGJLdQ5sGvoVkmR3SM8n+r7DsWNIrQht9Wqn+6Q/FBmmEI8UV3EGuI6yVEzmH3vwPtncLU4agzP5Fz4fbnjmgueUcYV1/rYUL6A/IeZuN5pommTsOofJuOwUSeOoDFXr954HmmneAA==", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [List = _t]), 
  List = Source[List]
in
  List


  let
    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [信用主体 = _t, DEBUT_DATE = _t])
in
    Source

    let
    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [信用主体 = _t, DEBUT_DATE = _t]),
    #"Appended Query" = Table.Combine({Source, credit_all2}),
    #"Changed Type" = Table.TransformColumnTypes(#"Appended Query",{{"DEBUT_DATE", type date}})
in
    #"Changed Type"