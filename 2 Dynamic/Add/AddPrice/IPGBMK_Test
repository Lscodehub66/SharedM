let
    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("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", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [IPT_DMI = _t]),
    #"Filtered Rows1" = Table.SelectRows(Source, each not List.Contains({ "100.5区域" , "170bps区域" , "190bps区域","7.65区域",
"10Y+110bps",
"7Y+90bps"
,"5Y+80bps"},[IPT_DMI]))
,
    #"Duplicated Column" = Table.DuplicateColumn(#"Filtered Rows1", "IPT_DMI", "DupeCol1"),
    #"Replaced Value" = fx("Replacer")(#"Duplicated Column",{"DupeCol1"},{"％","$"},{"%",""}),
    #"Extracted Text Before Delimiter" = Table.TransformColumns(#"Replaced Value", {{"DupeCol1", each Text.BeforeDelimiter(_, "，"), type text}}),
    #"Extracted Text Before Delimiter1" = Table.TransformColumns(#"Extracted Text Before Delimiter", {{"DupeCol1",  each if Text.Contains(_,"利息") then Text.BeforeDelimiter(_, if  Text.Contains(_,"+") then "+" else "(") else _, type text}}),
    #"Inserted Text Before Delimiter" = Table.AddColumn(#"Extracted Text Before Delimiter1", "BMK1", each if Text.Contains([DupeCol1],"+") then Text.BeforeDelimiter([DupeCol1], "+") else if  Text.Contains([DupeCol1],"%") then "%" else [DupeCol1], type text),
    #"Added Conditional Column" = Table.AddColumn(#"Inserted Text Before Delimiter", "BMK2", each if Text.Contains([BMK1], "SOFR") then "SOFR" else if Text.Contains([BMK1], "SONIA") then "SONIA" else if Text.Contains([BMK1], "MID", Comparer.OrdinalIgnoreCase) then "MS" else [BMK1]),
    #"Trimmed Text" = Table.TransformColumns(#"Added Conditional Column",{{"BMK2", Text.Trim, type text}}),
    #"Replaced CT" = Table.TransformColumns(#"Trimmed Text",{{"BMK2", each if Text.StartsWith(_,"CT") then Text.Replace(_,"CT","T") else if  Text.StartsWith(_,"UST") then Text.Replace(_,"UST","T")else _, type text}}),
    #"Removed Columns" = Table.RemoveColumns(#"Replaced CT",{"DupeCol1", "BMK1"}),
    #"Renamed Columns" = Table.RenameColumns(#"Removed Columns",{{"BMK2", "IPT_BMK"}})
in
    #"Renamed Columns"