(TableName as table) =>
    let
        Source = TableName,
        RefCol = {"计息基准", "IPT_DMI", "FPG_DMI"},
        ColumnsToAdd = {
            "浮息_SPD",
            "浮息_BMK",
            "IPT",
            "IPT_SPD",
            "IPT_YIELD",
            "FPT1",
            "WPIR",
            "FPT2",
            "FPT_SPD",
            "FPT_SPD上限",
            "FPT_SPD假设窄端",
            "FPT_YIELD",
            "FPT_YIELD上限",
            "IPT_BMK",
            "FPT_BMK",
            "定价YIELD_Num",
            "票息100DMI",
            "FPG1",
            "票息",
            "IPG",
            "FPG",
            "定价",
            "定价基准",
            "收窄基点"
        },
        Prep1 = Table.RemoveColumns(Source, ColumnsToAdd, MissingField.Ignore),
        Prep2 = List.Accumulate(
            RefCol,
            Prep1,
            (x, y) => if not Table.HasColumns(x, y) then Table.AddColumn(x, y, each "【Missing】" & y, type text) else x
        ),
        //        
        FRN_Spd = Table.AddColumn(
            Prep2, "浮息_SPD", each Text.AfterDelimiter(Text.Select([计息基准], {"0".."9", "+", "."}), "+"), type text
        ),
        FRN_Bmk = fx("Replace")(Table.AddColumn(
            FRN_Spd, "浮息_BMK", each Text.BeforeDelimiter([计息基准], "+"), type text
        ),{ "浮息_BMK"}, "价格"),
        AIPT_Clean = fx("Replace")(Table.AddColumn(
            Table.TransformColumns(
                FRN_Bmk,
                {
                    {
                        "IPT_DMI",
                        each
                            if Text.EndsWith(_, "a", Comparer.OrdinalIgnoreCase) then
                                Text.BeforeDelimiter(_, "A", {0, RelativePosition.FromEnd}) & "区域"
                            else
                                _
                    }
                }
            ),
            "IPT",
            each
              
                    Text.BeforeDelimiter(Text.BeforeDelimiter(Text.BeforeDelimiter([IPT_DMI], "，"), "区域+"), "（")
                
        ),{"IPT"}, "价格"),
        TF_IPT = Table.TransformColumns(
            AIPT_Clean,
            {
                {
                    "IPT",
                    each
                        if Text.Contains(_, "/T") or Text.Contains(_, "、") or Text.Contains(_, "-") then
                            "【" & _ & "】"
                        else
                            _
                }
            }
        ),
        AIPT_SPD = Table.AddColumn(
            TF_IPT,
            "IPT_SPD",
            each
                if Text.Contains([IPT], "-") or Text.Contains([IPT], "【") then
                    ""
                else
                    Text.Select(Text.AfterDelimiter([IPT], "+"), {"0".."9", "."}),
            type text
        ),
        AIPT_Yield = Table.AddColumn(
            AIPT_SPD,
            "IPT_YIELD",
            each if Text.Contains([IPT], "%") then Text.BeforeDelimiter([IPT], "%") else "",
            type text
        ),
//Transform manual input fpg number to Text
      FPTText  = Table.TransformColumns( AIPT_Yield, {{"FPG_DMI", each if Text.StartsWith(_??"","0.") 
       and not Text.Contains(_??"","%") then Number.ToText(Number.From(_),"0.000%") else _,type text}}),
        RFPTMissing = Table.ReplaceValue(
            FPTText, "", each if [IPT_DMI] <> "" then "【】" else "", Replacer.ReplaceValue, {"FPG_DMI"}
        ),

        AFPT_Clean = fx("Replace")(Table.AddColumn(
            RFPTMissing,
            "FPT1",
            each
                if Text.Contains([FPG_DMI], "%/") or Text.Contains([FPG_DMI], "|") then
                    "【" & Text.BeforeDelimiter([FPG_DMI], "，") & "】"
                else
                    Text.BeforeDelimiter([FPG_DMI], "，"),
            type text
        ),{"FPT1"},"价格"),
        AWPIR = Table.AddColumn(
            AFPT_Clean, "WPIR", each Text.Select(Text.AfterDelimiter([FPT1], "+/-"), {"0".."9", "-", "."}), type text
        ),
        AFPT2 = Table.AddColumn(
            AWPIR, "FPT2", each Text.BeforeDelimiter(Text.BeforeDelimiter([FPT1], "+/-"), "("), type text
        ),
        AFPT_Spd = Table.AddColumn(
            AFPT2,
            "FPT_SPD",
            each Text.BeforeDelimiter(Text.Select(Text.AfterDelimiter([FPT2], "+"), {"0".."9", "-", "."}), "-"),
            type text
        ),
        AFPT_Spd上限 = Table.AddColumn(
            AFPT_Spd,
            "FPT_SPD上限",
            each Text.Select(Text.AfterDelimiter(Text.AfterDelimiter([FPT2], "+"), "-"), {"0".."9", "."}),
            type text
        ),
        NumFPT_Spd下限 = Table.AddColumn(
            fx("Data")(AFPT_Spd上限),
            "FPT_SPD假设窄端",
            each
                if [FPT_SPD] <> null and [WPIR] <> null then
                    [FPT_SPD] - [WPIR]
                else if [FPT_SPD] <> null then
                    [FPT_SPD]
                else
                    null,
            type number
        ),
        AFPT_Yield = Table.AddColumn(
            NumFPT_Spd下限,
            "FPT_YIELD",
            each
                if Text.Contains([FPT2], "【") then
                    ""
                else
                    Text.BeforeDelimiter(
                        Text.Replace(Text.BeforeDelimiter([FPT2], "%", {0, RelativePosition.FromEnd}), "%", ""), "-"
                    ),
            type text
        ),
        AFPT_Yield上限 = Table.AddColumn(
            AFPT_Yield,
            "FPT_YIELD上限",
            each
                if Text.Contains([FPT2], "%") and not Text.Contains([FPT2], "T") then
                    Text.AfterDelimiter(
                        Text.Replace(Text.BeforeDelimiter([FPT2], "%", {0, RelativePosition.FromEnd}), "%", ""), "-"
                    )
                else
                    "",
            type text
        )
    in
        AFPT_Yield上限
