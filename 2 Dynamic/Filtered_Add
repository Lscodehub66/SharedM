// let LoadCode = Load("Filtered_Add","Code"), EVA = Expression.Evaluate(LoadCode ,#shared) in EVA
let
    Source1 = CWB("DLD_Conso_Filter"),
    Adjustment = Table.ReplaceValue(
        Source1,
        "【发行规模(亿)为空值】",
        each
            if List.Contains({"AddTap", "BBG"}, [DataSource]) or List.Contains({"(DMI)"}, [IS_FIMTN]) then
                ""
            else
                "【发行规模(亿)为空值】",
        Replacer.ReplaceValue,
        {"Filter_Bond"}
    ),
    Filtered = Table.SelectRows(
        Adjustment,
        each List.Contains({null, "", "--"}, [Filter_Bond]) and List.Contains({null, "", "--"}, [Filter_Exch])
    ),
    Custom1 = Table.AddColumn(Filtered, "删除及隐藏", each if [IS_FIMTN] = "Y" or [IS_FIMTN] = "【Y】" then "FIMTN" else ""),
    Clean_Structure = fx("Replace")(Table.DuplicateColumn(Custom1, "发行架构", "结构"), {"结构"}, "结构"),
    Added = List.Accumulate(
        {
            "BISLROLE",
            "BnD",
            "SBLC",
            "Exchange",
            "BankBranch",
            "BBGFX",
            "Stats2",
            "BCM",
            "FRNString",
            "CpnString",
            "IPGString",
            "FPGString",
            "PriceFinal",
            "SpdTighten",
            "PtTighten",
            "Tenor",
            "ESGMore"
        },
        Clean_Structure,
        (x, y) => fx("Add" & y)(x)
    ),
    Replaced2 = Table.ReplaceValue(
        Added,
        each [债券简称],
        each
            if List.Contains({null, "", "--"}, [债券简称]) and not List.Contains({null, "", "--"}, [信用主体]) then
                [信用主体]
            else
                [债券简称],
        Replacer.ReplaceValue,
        {"债券简称"}
    ),
    // DM = {"mIssue", "mStats", "mBISL", "mEXE", "mCredit","债券备注"},
    #"Operational Columns" = fx("NewOrInDB")(Replaced2),
    #"Added IsTap" = fx("AddReopen")(#"Operational Columns"),
    HD2 = {"Index", "债券简称", "删除及隐藏", "mIssue", "mBond", "mStats", "mBISL", "mEXE", "mChart", "mCredit"},
    //  & {"Filter_Credit", "Filter_Bond", "Filter_Exch", "IS_FIMTN"}
    Reordered = fx(
        "1st"
    )(
        try
            Table.ReorderColumns(#"Added IsTap", CWB("Filtered_Add", "CN"), MissingField.Ignore)
        otherwise
            #"Added IsTap",
        HD2
    ),
    Checked = fx("CheckNDupe")(Reordered),
    Stamped = Table.AddColumn(
        Table.RemoveColumns(Checked, {"Timestamp"}, MissingField.Ignore),
        "Timestamp",
        each DateTime.LocalNow(),
        type datetime
    ),
    Sorted = fx("SortNIndex")(Stamped)
in
    Sorted
