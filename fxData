(TableName as table, optional _inputnum as nullable number) =>
    let
        Source = TableName,
        //Global RenameColumns
        DBRenamed = Table.RenameColumns(
            Source,
            {
                {"IN_板块", "板块"},
                {"浮动息差", "FLOATER_FORMULA"},
                {"发行人注册地", "发行人成立地"},
                {"FLOATER_FORMULA", "计息基准"},
                {"发行价格", "发行价"},
                {"IN.中资属性", "中资属性"},
                {"发行结构", "发行架构"},
                {"FEATURED", "品种主题"},
                {"ticker", "TICKER"},
                {"交易所", "发行场所"},
                {"临时isin", "ISIN_TEMP"} ,   {"IS_B&D", "OTHER_ROLE"}
            },
            MissingField.Ignore
        ),
        CN_RNSource = List.Buffer(Table.ColumnNames(DBRenamed)),
        //DateTime ValueType
        DateTime1 = {"Timestamp", "定价会日期时间", "Date Time"},
        Time1 = {"定价会时间"},
        //Date ValueType
        Date1 = {
            "CLIENT_SINCE",
            "交割日",
            "KYC Deadline",
            "上会审批日",
            "上市日期",
            "兑付日",
            "到期日",
            "发行日",
            "发行起始日",
            "DEBUT_DATE",
            "定价日",
            "假设KYC到期日",
            "行权兑付日",
            "起息日",
            "起息日期",
            "违约日期",
            "项目定价日",
            "首次付息日",
            "项目定价日",
            "首次违约日",
            "Monday",
            "LastFriday",
            "LastMonday",
            "OneWeekBefore",
            "YearStart",
            "OneYearAgo"
        }
            & List.Select(
                CN_RNSource,
                each Text.Contains(_, "date", Comparer.OrdinalIgnoreCase) and not Text.StartsWith(_, "是否")
            ),
        //
        Int64 = {
            "曾作为JGC",
            "曾作为JBR",
            "曾作为承销商",
            "账户数",
            "发行数",
            "DayOfWeek.Num",
            "Count_BISLDeal",
            "Count_JBR",
            "Count_JGC",
            "ISIN_BISLDeal",
            "ISIN_JBR",
            "ISIN_JGC",
            "多品种",
            "多币种",
            "多期限",
            "多笔",
            "Tranches",
            "WEEKNUM"
        },
        //Number ValueTyp
        Num0ToNull = {"Δ1周", "Δ年初至今", "PRJ对账号"},
        Num5 = List.Select(CN_RNSource, each Text.StartsWith(_, "R_") or Text.StartsWith(_, "C_"))
            & Num0ToNull
            & {"FX_Rate", "QRC汇率因子", "USD", "CNH", "HKD", "EUR", "SGD", "MOP", "GBP", "AUD", "NZD", "CAD"},
        Num3 = List.Select(
            CN_RNSource,
            each
                Text.Contains(_, "亿港币")
                or Text.Contains(_, "亿美元")
                or Text.Contains(_, "亿元")
                or Text.Contains(_, "规模(亿)")
                or Text.Contains(_, "债券余额")
        )
            & {"排行榜份额(%)"},
        Num2 = {"投资级", "高收益级", "iTraxx Asia", "VIX", "BOCOM下单量", "BOCOM分配量"}
            & List.Select(
                CN_RNSource, each Text.StartsWith(_, "S_") or Text.StartsWith(_, "Spd_") or Text.StartsWith(_, "I_")
            ),
        Num1 = {"最终账簿(亿)","建账峰值(亿)", "收窄Num"} & List.Select(CN_RNSource, each Text.StartsWith(_, "V_")),
        Num0 = {"FEE", "Relevance", "Year.Num", "兑付日.YearNum", "金额 (MM USD)"}
            & List.Select(CN_RNSource, each Text.StartsWith(_, "CT_") or Text.StartsWith(_, "承销费")),
        Num = {
            "IPT_YIELD",
            "承销费.其他",
            "定价YIELD_Num",
            "IPT_SPD",
            "WPIR",
            "FPT_YIELD",
            "FPT_SPD假设窄端",
            "FPT_YIELD上限",
            "FPT_SPD上限",
            "FPT_SPD",
            "SortValue",
            "SGD",
            "Size (MM)",
            "TOTAL_FEE",
            "定价息差",
            "年份",
            "当前",
            "投资者账户数",
            "票面利率",
            "第N次担任",
            "认购额(亿)",
            "10年期",
            "2年期",
            "30年期",
            "3个月",
            "3年期",
            "5年期",
            "7年期",
            "CNY",
            "Index",
            "USDCNH CCS 2Y",
            "USDCNH CCS 3Y",
            "USDCNH CCS 5Y",
            "中国",
            "人民币债券指数",
            "付息周期_月",
            "利差(bp)",
            "台湾人民币存款余额",
            "在岸即期价",
            "实际发行总额_亿",
            "平均利差(bp)",
            "新加坡人民币存款余额",
            "离岸即期价",
            "美元指数",
            "美国",
            "香港人民币存款余额",
            "票息_DMI",
            "票息_BBG",
            "收窄幅度(bp)",
            "发行价",
            "首日涨跌",
            "认购倍数",
            "亚洲占比",
            "基金占比",
            "RangeStart",
            "RangeEnd"
        }
            & List.Select(CN_RNSource, each Text.StartsWith(_, "Index_") or Text.EndsWith(_, ".num")),
        Text_Trim = {"PROJECT_CODE", "期数", "外部评审机构", "外部评审方式", "FolderPath", "地区分布", "类型分布", "投资者分布", "投资者类型","新闻"},
        Text_Upper = {
            "CCY",
            "信用主体",
            "ISIN",
            "ISIN_TEMP",
            "地区分布",
            "类型分布",
            "投资者分布",
            "投资者类型",
            "ISIN_144A",
            "ISIN Code",
            "发行人",
            "担保人",
            "备证行",
            "维好协议提供者",
            "TICKER",
            "债券代码",
            "发行人名称英文*",
            "发行人名称英文"
        },
        Text_NoSpace = {
            "Check",
            "ISIN",
            "ISIN_TEMP",
            "ISIN_144A",
            "发行评级",
            "主体评级",
            "修改.发行评级",
            "修改.主体评级",
            "境内主体评级",
            "交割T+n"
        },
        Text_NoNA = {"增发判定", "修改.增发判定", "主题债券", "品种主题", "备证行全称","期数"},
        Text1 = {
            "地区覆盖","OTHER_ROLE","角色资历分类","上周主要经济数据", "发布(HKT) ", "前值", "预期", "现值", "ObjectName",
            "假期简称",
            "是否中国假期", 
            "B&D/LeftLead",
            "Project Name",
            "债券名称",
            "发行人总部所在地区",
            "地区Mapping",
            "承销费.其他",
            "汇丰角色",
            "绿债/可持续债",
            "绿债/可持续债.绿债",
            "融资规模.其他.其他币种",
            "融资规模.其他.币种",
            "承销商",
            "FolderName",
            "覆盖地区",
            "状态",
            "DMI字段",
            "覆盖团队",
            "主体",
            "计息基准",
            "浮息定价",
            "最终定价",
            "IPT_DMI",
            "FPG",
            "IPT",
            "FPG_DMI",
            "IPG",
            "EXE",
            "浮息息差",
            "FLOATER_FORMULA",
            "JGC",
            "JBR",
            "系",
            "mCredit",
            "mCurated",
            "PROJECT_CN",
            "定价会时段",
            "mBISL",
            "描述",
            "SeriesCN_Indice",
            "Series_Indice",
            "SeriesCN",
            "Series",
            "上市类型",
            "KYC Status",
            "补充OMAS updates",
            "主体类型",
            "主体类型_YY",
            "YY类型",
            "板块标签",
            "Sector",
            "SHORTNAMER",
            "DataSource",
            "公盘地址",
            "团队成员",
            "发行人名称中文",
            "Record Keeping",
            "DD Risk",
            "DD Form",
            "Worldcheck",
            "Approved by RO",
            "大股东持股",
            "大股东",
            "行政级别",
            "平台重要性",
            "主营业务",
            "删除及隐藏",
            "KYC",
            "发行方式",
            "Project Name",
            "担任角色",
            "项目名称（集团全称）",
            "项目名称(集团全称)",
            "临时isin",
            "申万二级",
            "英文简称",
            "CLIENT对账号",
            "SBLC提供者",
            "备证行分行",
            "Sync",
            "Tap",
            "TextCheck",
            "YYMM",
            "交易状态",
            "付息频率",
            "债券简称",
            "债券类型",
            "债项初始评级",
            "债项评级",
            "备证行评级",
            "偿还顺位",
            "利率类型",
            "发行场所",
            "发行期限(年)",
            "发行架构",
            "台账序号",
            "当前主体评级",
            "备注",
            "年期",
            "序号",
            "牵头经办人",
            "特殊条款",
            "特殊条款说明",
            "省份",
            "票息",
            "联席全球协调人",
            "行业",
            "评级分类",
            "货币",
            "通过分行",
            "投资者类型",
            "投资者分布",
            "筹款用途",
            "公司类型",
            "细分行业",
            "板块三级",
            "板块二级",
            "项目状态",
            "公司名称",
            "币种",
            "承销团成员",
            "项目进展",
            "分行",
            "区域",
            "地区",
            "城市",
            "区县",
            "评级类型",
            "穆迪/标普",
            "主体评级展望",
            "定价_DMI",
            "联席账簿管理人",
            "Updator",
            "信用主体(备证行)",
            "定价",
            "定价基准",
            "结构",
            "上市",
            "上市分类",
            "ESG",
            "货币细分",
            "发行人成立地",
            "发行人主上市地",
            "PROJECT_NAME",
            "COVERAGE",
            "亮点",
            "期限备注",
            "债券备注",
            "OTHER_ISIN",
            "Stats",
            "BISL_ROLE",
            "港分_ROLE",
            "澳分_ROLE",
            "BOCOM_DEAL?",
            "新规角色",
            "备证行标签",
            "信用主体简称",
            "中资属性",
            "板块",
            "行业二级",
            "级别",
            "投标资历分类",
            "年",
            "季",
            "月",
            "周",
            "年月",
            "美元规模分类",
            "Structure",
            "结构分类",
            "清算地",
            "期限",
            "币种单位",
            "币种规模",
            "ESG主题",
            "备证分类",
            "主体评级分类",
            "角色",
            "主题",
            "发行品种",
            "COMPARER",
            "交易简称",
            "发行规则",
            "曾用名",
            "视图",
            "PROJECT_CODE_CN",
            "委任函模板",
            "委任方式",
            "BOCOM意向订单",
            "EXE_Team",
            "EXE",
            "KYC_Category",
            "DD_Risk",
            "IssuerNotice",
            "委任进度",
            "CP_FL",
            "SA支付时限",
            "Settlement",
            "项目来源",
            "交行及独家订单",
            "定价会拨入",
            "BBG_Page",
            "路演形式",
            "BBG_Msg",
            "项目亮点"
        }
            & List.Select(
                CN_RNSource,
                each
                    Text.Contains(_, "是否")
                    or Text.StartsWith(_, "IS_", Comparer.OrdinalIgnoreCase)
                    or Text.StartsWith(_, "Filter_", Comparer.OrdinalIgnoreCase)
            ),
        //Type Transformation
        Type_Dimtbl = Table.Buffer(
            Table.FillDown(
                Table.Combine(
                    {
                        Table.FromColumns({DateTime1, {type datetime}, {}}),
                        Table.FromColumns({Time1, {type time}, {}}),
                        Table.FromColumns({Date1, {type date}}),
                        Table.FromColumns({Int64, {Int64.Type}}),
                        Table.FromColumns({Num5, {type number}, {5}}),
                        Table.FromColumns({Num3, {}, {3}}),
                        Table.FromColumns({Num2, {}, {2}}),
                        Table.FromColumns({Num1, {}, {1}}),
                        Table.FromColumns({Num0, {}, {0}}),
                        Table.FromColumns({Num, {}, {-1}}),
                        Table.FromColumns({Text_Trim, {type text}, {Text.Trim}}),
                        Table.FromColumns({Text_Upper, {}, {Text.Upper}}),
                        Table.FromColumns({Text_NoNA, {}, {"-"}}),
                        Table.FromColumns({Text_NoSpace, {}, {" "}}),
                        Table.FromColumns({Text1, {}, {""}})
                    }
                ),
                {"Column2", "Column3"}
            )
        ),
        Type_Mytbl_Duped = Table.SelectRows(Type_Dimtbl, each List.Contains(CN_RNSource, [Column1])),
        Type_MyDistinctList = Table.ToColumns(
            Table.Transpose(Table.Distinct(Table.RemoveColumns(Type_Mytbl_Duped, {"Column3"}), {"Column1"}))
        )
        //Table.ToColumns(Table.Transpose(Table.RemoveColumns(Type_Mytbl_Duped_ValueType, {"Column2"})))
        ,
        Type_TF = Table.TransformColumnTypes(DBRenamed, Type_MyDistinctList),
        // Replace all errors
        Error_MyList = Table.ToColumns(
            Table.Transpose(
                Table.AddColumn(
                    Table.FromList(CN_RNSource, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
                    "Replacement",
                    each null
                )
            )
        ),
        Error_Bye = Table.ReplaceErrorValues(Type_TF, Error_MyList),
        //Rounding Transformation
        NullFrom0 = Table.ReplaceValue(
            Error_Bye, 0, null, Replacer.ReplaceValue, List.Intersect({CN_RNSource, Num0ToNull})
        ),
        Roundingtbl = Table.SelectRows(Type_Mytbl_Duped, each List.Contains({5, 3, 2, 1, 0}, [Column3])),
        RoundingList = List.Zip({Roundingtbl[Column1], Roundingtbl[Column3]}),
        FnRound = List.Accumulate(
            RoundingList,
            NullFrom0,
            (x, y) => Table.TransformColumns(x, {{y{0}, each Number.Round(_, y{1}), type number}})
        ),
        //Text Transformation
        ColText_FillDown = List.Select(CN_RNSource, each Text.EndsWith(_, "FillDown", Comparer.OrdinalIgnoreCase)),
        FilledDown = Table.FillDown(
            Table.ReplaceValue(FnRound, "", null, Replacer.ReplaceValue, ColText_FillDown), ColText_FillDown
        ),
        MyTextList = List.Distinct(Table.SelectRows(Type_Mytbl_Duped, each [Column2] = type text)[Column1]),
        BlankText = Table.ReplaceValue(FilledDown, null, "", Replacer.ReplaceValue, MyTextList),
        TrimUppertbl = Table.SelectRows(Type_Mytbl_Duped, each List.Contains({Text.Trim, Text.Upper}, [Column3])),
        TrimUpperList = List.Zip({TrimUppertbl[Column1], TrimUppertbl[Column3]}),
        FnText = List.Accumulate(
            TrimUpperList, BlankText, (x, y) => Table.TransformColumns(x, {{y{0}, y{1}, type text}})
        ),
        NASpacetbl = Table.SelectRows(Type_Mytbl_Duped, each List.Contains({" ", "-"}, [Column3])),
        NASpaceList = List.Zip({NASpacetbl[Column1], NASpacetbl[Column3]}),
        FnRemove = List.Accumulate(
            NASpaceList, FnText, (x, y) => Table.TransformColumns(x, {{y{0}, each Text.Remove(_, y{1}), type text}})
        ),
        // Other Transformation
        DigitSpace_Removed =
            if List.Contains(CN_RNSource, "信用主体") then
                Table.ReplaceValue(
                    FnRemove,
                    " ",
                    each if not List.ContainsAny({"A".."Z"}, Text.Start([信用主体], 1)) then "" else " ",
                    Replacer.ReplaceText,
                    {"信用主体"}
                )
            else
                FnRemove,
        ConditionalReplaced = List.Accumulate(
            {
                {List.Contains(CN_RNSource, "货币"), "CNY", "CNH", Replacer.ReplaceValue, {"货币"}},
                {
                    List.Contains(CN_RNSource, "公盘地址"),
                    "\\10.10.1.215\",
                    "\\itd-m09-fs02\",
                    Replacer.ReplaceText,
                    {"公盘地址"}
                },
                {List.Contains({1}, _inputnum), "【", "", Replacer.ReplaceText, MyTextList},
                {List.Contains({1}, _inputnum), "】", "", Replacer.ReplaceText, MyTextList}
            },
            DigitSpace_Removed,
            (x, y) => if y{0} then Table.ReplaceValue(x, y{1}, y{2}, y{3}, y{4}) else x
        ),
        MyDateList = Table.SelectRows(Type_Mytbl_Duped, each [Column2] = type date)[Column1],
        PresentedDate =
            if _inputnum = 2 then
                List.Accumulate(
                    MyDateList,
                    ConditionalReplaced,
                    (x, y) =>
                        Table.TransformColumns(
                            x, {{y, each if _ = null then "" else Date.ToText(_, "yyyy/M/d"), type text}}
                        )
                )
            else
                ConditionalReplaced
    in
        PresentedDate
